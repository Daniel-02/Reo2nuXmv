MODULE main
VAR
	time: 0..3;
	prod: prod(time);
ASSIGN
	init(time) := 0;
	next(time) := case
		time < 3: time + 1;
		TRUE: time;
esac;

MODULE merger1(time)
VAR
	ports: portsModule
	cs: {q0};
TRANS
	((cs = q0 & ports.b = NULL & ports.c[time] != NULL & ports.a[time] = ports.c[time])-> next(cs) = q0) &
	((cs = q0 & ports.a = NULL & ports.c[time] != NULL & ports.b[time] = ports.c[time])-> next(cs) = q0);

MODULE syncDrain2(time)
VAR
	ports: portsModule
	cs: {q0};
TRANS
	((cs = q0 & ports.a[time] != NULL & ports.b[time] != NULL)-> next(cs) = q0);

MODULE fifo3(time)
VAR
	ports: portsModule
	cs: {q0,p0,p1};
TRANS
	((cs = q0 & ports.c = NULL & ports.b[time] = 0)-> next(cs) = p0) &
	((cs = q0 & ports.c = NULL & ports.b[time] = 1)-> next(cs) = p1) &
	((cs = p0 & ports.b = NULL & ports.c[time] = 0)-> next(cs) = q0) &
	((cs = p1 & ports.b = NULL & ports.c[time] = 1)-> next(cs) = q0);

MODULE merger1syncDrain2(time)
VAR
	prod1: merger1(time);
	prod2: syncDrain2(time);
	ports: portsModule;
	cs: {q0q0};
INVAR
	(((prod1.cs = q0) & (prod2.cs = q0)) <-> (cs = q0q0));

MODULE merger1syncDrain2fifo3(time)
VAR
	prod1: merger1syncDrain2(time);
	prod2: fifo3(time);
	ports: portsModule;
	cs: {q0q0q0,q0q0p0,q0q0p1};
TRANS
	((cs = q0q0q0) -> ((next(cs) != q0q0p0) & (next(cs) != q0q0p1)) &
	((cs = q0q0p0) -> ((next(cs) != q0q0q0) & (next(cs) != q0q0p1)) &
	((cs = q0q0p1) -> ((next(cs) != q0q0q0) & (next(cs) != q0q0p0));
INVAR
	(((prod1.cs = q0q0) & (prod2.cs = q0)) <-> (cs = q0q0q0)) &
	(((prod1.cs = q0q0) & (prod2.cs = p0)) <-> (cs = q0q0p0)) &
	(((prod1.cs = q0q0) & (prod2.cs = p1)) <-> (cs = q0q0p1));

MODULE portsModule
FROZENVAR
	a : array 0..3 of{NULL, 0, 1};
	c : array 0..3 of{NULL, 0, 1};
	b : array 0..3 of{NULL, 0, 1};
ASSIGN
	init(a[0]) := 0;
	init(a[1]) := 0;
	init(a[2]) := 0;
	init(c[0]) := 0;
	init(c[1]) := 0;
	init(c[2]) := 0;
	init(b[0]) := 0;
	init(b[1]) := 0;
	init(b[2]) := 0;
