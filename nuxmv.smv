MODULE main
VAR
	time: 0..3;
	prod: prod(time);
ASSIGN
	init(time) := 0;
	next(time) := case
		time < 3: time + 1;
		TRUE: time;
esac;

MODULE sync1(time)
VAR
	ports: ports
	cs: {q0};
TRANS
	((cs = q0 & ports.b = ports.c)-> next(cs) = q0);

MODULE sync2(time)
VAR
	ports: ports
	cs: {q0};
TRANS
	((cs = q0 & ports.c = ports.d)-> next(cs) = q0);

MODULE lossySync3(time)
VAR
	ports: ports
	cs: {q0};
TRANS
	((cs = q0 & ports.d = ports.b)-> next(cs) = q0) & ((cs = q0 & ports.b = NULL & ports.d != NULL)-> next(cs) = q0);

MODULE prod(time)
VAR
	ports: ports
	cs: {q0q0};
TRANS
	((cs = q0q0) & (ports.b = ports.c & ports.c = ports.d) -> next(cs) = q0q0);
INVAR
	(((prod1.cs = q0) & (prod2.cs = q0)) <-> (cs = q0q0);

MODULE prod(time)
VAR
	ports: ports
	cs: {q0q0,q0q0q0};
TRANS
	((cs = q0q0) & (ports.b = ports.c & ports.c = ports.d) -> next(cs) = q0q0) &
	((cs = q0q0q0) & (q0q0q0 & ports.d = ports.b) -> next(cs) = q0q0q0) &
	((cs = q0q0q0) -> ((next(cs) != q0q0));
INVAR
	(((prod1.cs = q0) & (prod2.cs = q0)) <-> (cs = q0q0) &
	(((prod1.cs = q0q0) & (prod2.cs = q0)) <-> (cs = q0q0q0);

MODULE portsModule
FROZENVAR
	portA: array 0..3 of {NULL, 30, 50};
	portA: array 0..3 of {NULL, 30, 50};
ASSIGN
	init(portA[0]) := 30;
	init(portB[0]) := NULL;
	init(portA[1]) := NULL;
	init(portB[1]) := 50;
	init(portA[2]) := 50;
	init(portB[2]) := 30;
