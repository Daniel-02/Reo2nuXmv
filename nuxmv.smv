MODULE main
VAR
	time: 0..3;
	automatoFinal: automatoFinal(time);
ASSIGN
	init(time) := 0;
	next(time) := case
		time < 3: time + 1;
		TRUE: time;
esac;

MODULE sync1(time)
VAR
	ports: portsModule;
	cs: {q0};
TRANS
	((cs = q0 & ports.a[time] != NULL & ports.a[time] = ports.b[time]) -> next(cs) = q0);

MODULE sync2(time)
VAR
	ports: portsModule;
	cs: {q0};
TRANS
	((cs = q0 & ports.c[time] != NULL & ports.c[time] = ports.d[time]) -> next(cs) = q0);

MODULE sync3(time)
VAR
	ports: portsModule;
	cs: {q0};
TRANS
	((cs = q0 & ports.l[time] != NULL & ports.l[time] = ports.m[time]) -> next(cs) = q0);

MODULE sync4(time)
VAR
	ports: portsModule;
	cs: {q0};
TRANS
	((cs = q0 & ports.e[time] != NULL & ports.e[time] = ports.f[time]) -> next(cs) = q0);

MODULE syncDrain5(time)
VAR
	ports: portsModule;
	cs: {q0};
TRANS
	((cs = q0 & ports.i[time] != NULL & ports.j[time] != NULL) -> next(cs) = q0);

MODULE fifo6(time)
VAR
	ports: portsModule;
	cs: {q0,p0,p1};
ASSIGN
	init(cs) := {q0};
TRANS
	((cs = q0 & ports.h[time] = NULL & ports.g[time] = 0) -> next(cs) = p0) &
	((cs = q0 & ports.h[time] = NULL & ports.g[time] = 1) -> next(cs) = p1) &
	((cs = p0 & ports.g[time] = NULL & ports.h[time] = 0) -> next(cs) = q0) &
	((cs = p1 & ports.g[time] = NULL & ports.h[time] = 1) -> next(cs) = q0);

MODULE sync1sync2(time)
VAR
	prod1: sync1(time);
	prod2: sync2(time);
	ports: portsModule;
	cs: {q0q0};
INVAR
	(((prod1.cs = q0) & (prod2.cs = q0)) <-> (cs = q0q0));

MODULE sync1sync2sync3(time)
VAR
	prod1: sync1sync2(time);
	prod2: sync3(time);
	ports: portsModule;
	cs: {q0q0q0};
INVAR
	(((prod1.cs = q0q0) & (prod2.cs = q0)) <-> (cs = q0q0q0));

MODULE sync1sync2sync3sync4(time)
VAR
	prod1: sync1sync2sync3(time);
	prod2: sync4(time);
	ports: portsModule;
	cs: {q0q0q0q0};
INVAR
	(((prod1.cs = q0q0q0) & (prod2.cs = q0)) <-> (cs = q0q0q0q0));

MODULE sync1sync2sync3sync4syncDrain5(time)
VAR
	prod1: sync1sync2sync3sync4(time);
	prod2: syncDrain5(time);
	ports: portsModule;
	cs: {q0q0q0q0q0};
INVAR
	(((prod1.cs = q0q0q0q0) & (prod2.cs = q0)) <-> (cs = q0q0q0q0q0));

MODULE automatoFinal(time)
VAR
	prod1: sync1sync2sync3sync4syncDrain5(time);
	prod2: fifo6(time);
	ports: portsModule;
	cs: {q0q0q0q0q0q0,q0q0q0q0q0p0,q0q0q0q0q0p1};
ASSIGN
	init(cs) := {q0q0q0q0q0q0};
TRANS
	((cs = q0q0q0q0q0p0) -> ((next(cs) != q0q0q0q0q0p1))) &
	((cs = q0q0q0q0q0p1) -> ((next(cs) != q0q0q0q0q0p0)));
INVAR
	(((prod1.cs = q0q0q0q0q0) & (prod2.cs = q0)) <-> (cs = q0q0q0q0q0q0)) &
	(((prod1.cs = q0q0q0q0q0) & (prod2.cs = p0)) <-> (cs = q0q0q0q0q0p0)) &
	(((prod1.cs = q0q0q0q0q0) & (prod2.cs = p1)) <-> (cs = q0q0q0q0q0p1));

MODULE portsModule
FROZENVAR
	a : array 0..3 of {NULL, 0, 1};
	b : array 0..3 of {NULL, 0, 1};
	c : array 0..3 of {NULL, 0, 1};
	d : array 0..3 of {NULL, 0, 1};
	l : array 0..3 of {NULL, 0, 1};
	m : array 0..3 of {NULL, 0, 1};
	e : array 0..3 of {NULL, 0, 1};
	f : array 0..3 of {NULL, 0, 1};
	i : array 0..3 of {NULL, 0, 1};
	j : array 0..3 of {NULL, 0, 1};
	g : array 0..3 of {NULL, 0, 1};
	h : array 0..3 of {NULL, 0, 1};
ASSIGN
	init(a[0]) := 1;
	init(a[1]) := 1;
	init(a[2]) := 1;
	init(b[0]) := 1;
	init(b[1]) := 0;
	init(b[2]) := 0;
	init(c[0]) := 0;
	init(c[1]) := NULL;
	init(c[2]) := NULL;
	init(d[0]) := 1;
	init(d[1]) := NULL;
	init(d[2]) := NULL;
	init(l[0]) := NULL;
	init(l[1]) := 0;
	init(l[2]) := NULL;
	init(m[0]) := 1;
	init(m[1]) := 1;
	init(m[2]) := NULL;
	init(e[0]) := NULL;
	init(e[1]) := 0;
	init(e[2]) := NULL;
	init(f[0]) := NULL;
	init(f[1]) := 1;
	init(f[2]) := 1;
	init(i[0]) := 0;
	init(i[1]) := 0;
	init(i[2]) := NULL;
	init(j[0]) := 0;
	init(j[1]) := NULL;
	init(j[2]) := NULL;
	init(g[0]) := 1;
	init(g[1]) := 0;
	init(g[2]) := 1;
	init(h[0]) := NULL;
	init(h[1]) := 0;
	init(h[2]) := 0;
